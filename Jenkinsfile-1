pipeline {
    agent {
        label 'linux'
    }

    environment {
        GIT_COMMIT_SHORT = sh (returnStdout: true, script: '''echo $GIT_COMMIT | head -c 7''')
        BRANCH_NICK = sh (returnStdout: true, script: '''echo $BRANCH_NAME''')
    }

    stages {
        stage('Prepare .env') {
            steps {
                sh 'echo "\nGIT_COMMIT_SHORT=$(echo $GIT_COMMIT_SHORT)" >> .env'
                sh 'echo "\nBRANCH_NICK=$(echo $BRANCH_NICK)" >> .env'
            }
        }

        stage('Build Laravel') {
            steps {
                dir('blogx') {
                    sh 'docker build -f appprod.Dockerfile . -t laravel-prod-app:latest'
                    sh 'docker tag laravel-prod-app:latest jkpraja/laravel-prod-app:latest'
                    sh 'docker push jkpraja/laravel-prod-app:latest'    
                }
            }
        }

        stage('Build Webserver') {
            when {
                branch 'master'
            }
            steps {
                dir('blogx') {
                    sh 'pwd'
                    sh 'docker build -f server.Dockerfile . -t laravel-server:latest'
                    sh 'docker tag web-server:latest jkpraja/laravel-server:latest'
                    sh 'docker push jkpraja/laravel-server:latest'
                }
            }
        }

        stage('Deploy') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'dev-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''sh ./runappprod.sh''', execTimeout: 300000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '.env,prod-compose.yaml,runappprod.sh')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
    }
}